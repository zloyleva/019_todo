{"version":3,"sources":["Layouts/Header.js","store/actions.js","components/AddTask/index.js","components/TaskList/index.js","serviceWorker.js","store/reducer.js","index.js","App.js"],"names":["withStyles","root","flexGrow","marginBottom","props","react_default","a","createElement","className","classes","AppBar_default","position","color","Toolbar_default","Typography_default","variant","addNewTask","task","type","ADD_NEW_TASK","payload","AddTask","state","handleChange","e","_this","setState","target","value","submitHandler","preventDefault","console","log","_this2","this","_this$props","Grid_default","container","spacing","item","xs","sm","md","Paper_default","paper","form","onSubmit","event","TextField_default","id","label","textField","onChange","margin","Button_default","button","Component","theme","justifyContent","padding","unit","textAlign","marginLeft","marginRight","display","alignItems","connect","Object","objectSpread","dispatch","bindActionCreators","setTaskDone","DONE_TASK","setTaskRemove","REMOVE_TASK","tasks","map","el","index","key","name","done","onClick","Boolean","window","location","hostname","match","initState","remove","user","__webpack_require__","d","__webpack_exports__","store","createStore","arguments","length","undefined","action","concat","toConsumableArray","i","__REDUX_DEVTOOLS_EXTENSION__","getState","ReactDOM","render","es","Layouts_Header","components_AddTask","components_TaskList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cb4d8c9.chunk.js","sourcesContent":["import React from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n    root: {\n        flexGrow: 1,\n        marginBottom: 30\n    },\n};\n\nconst Header = props => (\n    <div className={props.classes.root}>\n        <AppBar position=\"static\" color=\"default\">\n            <Toolbar>\n                <Typography variant=\"h6\" color=\"inherit\">\n                    Tasks manager +\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    </div>\n);\n\nexport default withStyles(styles)(Header);","import {ADD_NEW_TASK, DONE_TASK,REMOVE_TASK} from \"../index\";\n\nexport const addNewTask = (task) => {\n    return {\n        type: ADD_NEW_TASK,\n        payload: task\n    }\n};\n\nexport const doneTask = (task_id) => {\n    return {\n        type: DONE_TASK,\n        payload: task_id\n    }\n};\n\nexport const removeTask = (task_id) => {\n    return {\n        type: REMOVE_TASK,\n        payload: task_id\n    }\n};","import React, {Component} from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport connect from \"react-redux/es/connect/connect\";\nimport {bindActionCreators} from \"redux\";\nimport {addNewTask} from \"../../store/actions\";\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    container: {\n        justifyContent: \"center\"\n    },\n    paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'center',\n    },\n    textField:{\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n    },\n    button: {\n        margin: theme.spacing.unit,\n    },\n    form: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    }\n});\n\nclass AddTask extends Component{\n\n    state = {\n        task: \"\"\n    };\n\n    render() {\n        {\n            const {classes,addNewTask} = this.props;\n            return (\n                <div className={classes.root}>\n                    <Grid container spacing={24} className={classes.container}>\n                        <Grid item xs={10} sm={8} md={6}>\n                            <Paper className={classes.paper}>\n                                <form className={classes.form} onSubmit={(event) => {\n                                    this.submitHandler(event, addNewTask)\n                                }}>\n                                    {/*<input type=\"text\"/>*/}\n                                    <TextField\n                                        id=\"outlined-name\"\n                                        label=\"Enter new Task\"\n                                        className={classes.textField}\n                                        value={this.state.task}\n                                        onChange={this.handleChange}\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                    />\n                                    {/*<button>Add task</button>*/}\n                                    <Button variant=\"outlined\" color=\"primary\" className={classes.button}>\n                                        Add task\n                                    </Button>\n                                </form>\n                            </Paper>\n\n                        </Grid>\n                    </Grid>\n                </div>\n            )\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            task: e.target.value\n        });\n    };\n\n    submitHandler = (e,addNewTask) => {\n        e.preventDefault();\n        console.log(\"submitHandler\",e.target[0].value);\n        addNewTask(this.state.task);\n        this.setState({\n            task: \"\"\n        });\n    };\n}\n\nconst putStateToProps = (state) => {\n    return {\n        ...state\n    }\n};\n\nconst putActionsToComponent = (dispatch) => {\n    return {\n        addNewTask: bindActionCreators(addNewTask,dispatch)\n    }\n};\n\nexport default withStyles(styles)(connect(\n    putStateToProps,\n    putActionsToComponent\n)(AddTask));","import React from 'react';\n\nimport {doneTask, removeTask} from \"../../store/actions\";\nimport {connect} from \"react-redux\";\n\nconst TaskList = (props) => {\n\n    const {tasks, setTaskDone, setTaskRemove} = props;\n    console.log(props);\n\n    return (\n        <ul>\n            {tasks.map((el, index) => (\n                <li key={index}>\n                    {el.name}\n                    {\n                        el.done?\"\":<button onClick={() => setTaskDone(index)}>Done</button>\n                    }\n                    <button onClick={() => setTaskRemove(index)}>Remove</button>\n                </li>\n            ))}\n        </ul>\n    )\n};\n\nconst mapStateToProps = state => ({...state});\nconst mapActionsToProps = dispatch =>{\n    return {\n        setTaskDone: task => dispatch(doneTask(task)),\n        setTaskRemove: task => dispatch(removeTask(task)),\n    }\n};\n\nexport default connect(mapStateToProps,mapActionsToProps)(TaskList);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_NEW_TASK, DONE_TASK, REMOVE_TASK} from \"../index\";\n\nconst initState = {\n    tasks: [\n        {name: \"Wake up\", done:false, remove:false}\n    ],\n    user: null\n};\n\nexport const reducer = (state=initState,action) => {\n\n    console.log(action);\n\n    switch (action.type) {\n        case ADD_NEW_TASK:\n            return {\n                ...state, tasks: [...state.tasks, {name: action.payload, done:false, remove:false}]\n            };\n        case DONE_TASK:\n            return {\n                // ...state, tasks: state.tasks\n                ...state, tasks: state.tasks.map((el, i) => action.payload === i?{...el, done:true}:el)\n            };\n        case REMOVE_TASK:\n            return {\n                // ...state, tasks: state.tasks\n                ...state, tasks: state.tasks.map((el, i) => action.payload === i?{...el, remove:true}:el)\n            };\n    }\n    return state;\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from \"redux\";\nimport {Provider} from 'react-redux';\nimport {reducer} from \"./store/reducer\";\n\nexport const ADD_NEW_TASK = \"ADD_NEW_TASK\";\nexport const DONE_TASK = \"DONE_TASK\";\nexport const REMOVE_TASK = \"REMOVE_TASK\";\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconsole.log(store.getState());\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\n\nimport Header from \"./Layouts/Header\";\nimport AddTask from \"./components/AddTask\";\nimport TaskList from \"./components/TaskList\";\n\nexport default props => (\n    <div>\n        <Header/>\n\n        <AddTask/>\n\n        <TaskList tasks={props.tasks}/>\n    </div>\n);"],"sourceRoot":""}